Switch the Git Branch
You can continue to practice the instructions below, making use of 3-webpack-production-config branch, and create a new branch for yourself adding service workers.

Otherwise, you can switch to 4-service-workers branch corresponding to the current exercise where all the steps have already been carried out. Use the following checkout command in your project root directory:

git checkout 4-service-workers
Add Service Workers
Google Workbox makes working with basic Service Workers incredibly convenient. We are going to follow their setup instructions, the steps are going to feel very familiar by now, because Google Workbox created a webpack plugin for us.

We are going to add service workers to webpack.prod.js config file, because to allow offline access, what the service workers actually do is create a cached version of your website that they can supply if the server can’t be reached. But we don’t want that caching around our dev site, so we won’t add this to our dev config at all.

Like we’ve learned with most plugins, when we call the generate service workers function, we have the ability to pass in some options. There are lots of cool options you can choose from, to do things like cache images at runtime, limit the max size of your cache, etc. For now, we are going to stick with the default settings.

So, we do our three steps:

In webpack.prod.js config file,

Require the plugin, by appending the new plugin statement
const WorkboxPlugin = require('workbox-webpack-plugin');
Instantiate the new plugin in the plugin list:
new WorkboxPlugin.GenerateSW()
On the terminal, install the plugin using npm install workbox-webpack-plugin --save-dev
If you follow along with the Workbox Service Worker documentation, there’s one more step. We need to register a Service Worker with our app. To do this, we will add a script to our /src/client/views/index.html file and call the register service worker function if the browser supports service workers.

Add this code to the bottom of your html file, just above the closing body tag.

<script>
 // Check that service workers are supported
 if ('serviceWorker' in navigator) {
     // Use the window load event to keep the page load performant
     window.addEventListener('load', () => {
         navigator.serviceWorker.register('/service-worker.js');
     });
 }
</script>
QUESTION 1 OF 2
A service worker is a json file that keeps a cached copy of your DOM





QUESTION 2 OF 2
Service Workers do all the following except:









In case this idea of PWA's really caught your interest, I would go to the Google Workbox PWA tutorial. Your knowledge of webpack and service workers will put you in a good place to get started.

